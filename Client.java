package chatting_program;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.security.PublicKey;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;

public class Client implements Runnable
{

	BufferedReader reader1, reader2;
	PrintWriter writer;
	Socket socket;
	Thread t1, t2;
	volatile String in = "";
	volatile String out = "";
	String host_ip = "";
	static int PORT = 5678;
	ObjectInputStream inO = null;
	InputStream is = null;
	volatile boolean exit = false;
	volatile boolean flag1 = false;
	PublicKey pub_RSA = null;
	SecretKey sKey = null;
	ObjectOutputStream outO = null;
	OutputStream os = null;
	byte[] encrypted_AESkey = null;
	static byte[] encrypted_iv = null;
	static String iv = null;
	String encoded_pub_RSAKey = null;
	
	
	
	public static void main(String[] args)
	{
		new Client();
		
	}
	
	
	public Client()
	{
		try {
			
			//Thread for read
			t1 = new Thread(this);
			
			//Thread for write
			t2 = new Thread(this);
			
			//Enter host's IP address
			socket = new Socket(host_ip, PORT);
			
			t1.start();
			t2.start();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	

	public void run(){
		try{
			if (Thread.currentThread() == t2){
				/*
				 * Writing Thread
				 */
				while(true) {
					if(flag1 == true) {
						
						//send encrypted AES key to server
						os = socket.getOutputStream();
						outO = new ObjectOutputStream(os);
						outO.writeObject(encrypted_AESkey);
						outO.flush();
						String encryted_AESkey_string = 
								new String(Base64.getEncoder().encode(encrypted_AESkey));
						System.out.println("[encrypted AES key]");
						System.out.println(encryted_AESkey_string + "\n");
						
						//send iv to server
						os = socket.getOutputStream();
						outO = new ObjectOutputStream(os);
						outO.writeObject(encrypted_iv);
						outO.flush();
						String encryted_IV_string = 
								new String(Base64.getEncoder().encode(encrypted_iv));
						System.out.println("[encrypted IV]");
						System.out.println(encryted_IV_string + "\n");
						
						break;
					} 
				}
				
				while (true) {
					//Writing chat
					
					reader1 = new BufferedReader(new InputStreamReader(System.in));
					writer = new PrintWriter(socket.getOutputStream(), true);
					
					//Add time stamp to entered message
					Long timeStamp = System.currentTimeMillis(); 
			        SimpleDateFormat sdf=new SimpleDateFormat("[yyyy-MM-dd HH:mm:ss]");
			        String sd = sdf.format(new Date(Long.parseLong(String.valueOf(timeStamp)))); 
			        
			        in = reader1.readLine();
			        if(exit == true)  break;
			        
					String send = "\"" + in +"\"" + " " + sd;
					
					//Encrypt with AES256
					String send_encrypt = Encrypt_AES(send, sKey);
					
					writer.println(send_encrypt);
					
				}
				
				
				
			} else {
				/*
				 * Reading Thread
				 */
				
				while(true) {
					if(pub_RSA == null) {
						
						//Get Server's public key
						is = socket.getInputStream();
						inO = new ObjectInputStream(is);
						pub_RSA = (PublicKey)inO.readObject();
						encoded_pub_RSAKey = Base64.getEncoder().encodeToString(pub_RSA.getEncoded());
						
						//Print RSA Public Key
						System.out.println("[RSA PublicKey info Received from Server]");
						System.out.println(encoded_pub_RSAKey + "\n");
						
					} else {
						
						//Encrypt the AES key with Server's public key
						sKey = generate_AES_key();
						encrypted_AESkey = Encrypt_RSA(sKey.getEncoded(), pub_RSA);
						String encodedsKey = Base64.getEncoder().encodeToString(sKey.getEncoded());
						
						//set iv and encrypt
						iv = "1234567812345678";
						encrypted_iv = Encrypt_RSA(iv.getBytes("UTF-8"), pub_RSA);
						
						flag1 = true;
						
						//Print AES SecretKey & IV generated by Client
						System.out.println("[IV info From Client]");
						System.out.println(iv + "\n");
						System.out.println("[AES SecretKey info generated by Client]");
						System.out.println(encodedsKey + "\n");
						
						
						/*
						 * 문자열을 byte로 바꾸고, 다시 문자열로 바꾸는 방법!
						byte[] ar = iv.getBytes("UTF-8");
						String decoded = new String(ar, "UTF-8");
						System.out.println(decoded);
						*/
						
						break;
					}
				}
				
				
				while (true) {
					//Reading chat
					
					reader2 = new BufferedReader(new InputStreamReader(socket.getInputStream()));
					out = reader2.readLine();
					
					//decrypt the message
					String decrypted_out = Decrypt_AES(out, sKey);
					
					System.out.println("[From Server] " + decrypted_out);
					System.out.println("[Encrypted Message] " + "\"" + out + "\"");
					
					String[] temp = decrypted_out.split("\"");
					
					if(temp[1].equals("exit")) {
						//when Server send exit message
						
						//reader1 = new BufferedReader(new InputStreamReader(System.in));
						writer = new PrintWriter(socket.getOutputStream(), true);
						
						//Add time stamp to entered message
						Long timeStamp = System.currentTimeMillis(); 
				        SimpleDateFormat sdf=new SimpleDateFormat("[yyyy-MM-dd HH:mm:ss]");
				        String sd = sdf.format(new Date(Long.parseLong(String.valueOf(timeStamp)))); 
				        
				        //send exit message to Server
				        in = "exit";
						String send = "\"" + in +"\"" + " " + sd;
						
						//Encrypt with AES256
						String send_encrypt = Encrypt_AES(send, sKey);
						
						writer.println(send_encrypt);
						System.out.println("\n##Server try to close the connection##\n##Press Enter to close the connection##");
						exit = true;
						break;
					}
				}
			}
			
			if(Thread.currentThread() == t2) {
				socket.close();
				System.out.println("connection closed");
				System.out.println("##Program End##");
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public static byte[] Encrypt_RSA(byte[] plaintext, PublicKey publicKey) 
	{
		byte[] encryptedSecret = null;
		
		try {
			
			Cipher cipher = Cipher.getInstance("RSA");
		
			cipher.init(Cipher.ENCRYPT_MODE, publicKey);
			encryptedSecret = cipher.doFinal(plaintext);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return encryptedSecret;
	}
	
	
	public static SecretKey generate_AES_key() {
		
		System.out.println("##Creating AES 256 Secret Key...##");
		
		SecretKey key = null;
		
		try {
			
		    KeyGenerator gen = KeyGenerator.getInstance("AES");
		    gen.init(256);
		    
		    key = gen.generateKey();
		    
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return key; 
	}
	

		
	
	public static String Encrypt_AES(String plaintext, SecretKey key)
	{
		String result = null;
		
		try {
		    
			Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
		    c.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv.getBytes()));
		 
		    byte[] encrypted = c.doFinal(plaintext.getBytes("UTF-8"));
		    result = new String(Base64.getEncoder().encode(encrypted));
		 
		    
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	
	public static String Decrypt_AES(String ciphertext, SecretKey key)
	{
		String result = null;
		
		try {
		    
		    Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
		    c.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv.getBytes("UTF-8")));
		    
		    byte[] decrypted = Base64.getDecoder().decode(ciphertext.getBytes("UTF-8"));
		    result = new String(c.doFinal(decrypted), "UTF-8");
		 
		    
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
}